package au.com.parcelpoint.api.integration.v4_1import au.com.parcelpoint.api.helper.ObjectBuilderimport au.com.parcelpoint.api.helper.TestIsolatorimport au.com.parcelpoint.api.web.config.AppProfileimport au.com.parcelpoint.api.web.config.AppTestConfigimport au.com.parcelpoint.api.web.config.security.DevAPIClientimport au.com.parcelpoint.api.web.controllers.v4.*import au.com.parcelpoint.api.web.controllers.v4_1.ArticleApiimport au.com.parcelpoint.domain.legacy.agent.*import au.com.parcelpoint.domain.legacy.carrier.CarrierRepositoryimport au.com.parcelpoint.domain.legacy.location.AgentLocationEntityimport au.com.parcelpoint.domain.legacy.location.LocationRepositoryimport au.com.parcelpoint.domain.legacy.parcel.ArticleEntityimport au.com.parcelpoint.domain.legacy.retailer.RetailerRepositoryimport au.com.parcelpoint.domain.order.CustomerOrderEntityimport au.com.parcelpoint.domain.order.OrderRepositoryimport au.com.parcelpoint.domain.shipment.FulfilmentItemRepositoryimport au.com.parcelpoint.domain.shipment.FulfilmentRepositoryimport au.com.parcelpoint.domain.sku.SkuLocationInventoryRepositoryimport au.com.parcelpoint.domain.sku.SkuRepositoryimport au.com.parcelpoint.domain.user.AgentUserEntityimport au.com.parcelpoint.domain.user.UserRepositoryimport au.com.parcelpoint.pojo.*import au.com.parcelpoint.pojo.v4_1.fulfilment.FulfilmentArticleRequestimport au.com.parcelpoint.services.article.ArticleServiceimport au.com.parcelpoint.services.fulfilment.FulfilmentServiceimport au.com.parcelpoint.services.retailer.RetailerServiceimport au.com.parcelpoint.test.ObjectMotherUtilimport com.fasterxml.jackson.databind.ObjectMapperimport com.google.common.collect.Listsimport org.springframework.beans.factory.annotation.Autowiredimport org.springframework.test.context.ActiveProfilesimport org.springframework.test.context.ContextConfigurationimport org.springframework.test.context.transaction.AfterTransactionimport org.springframework.test.context.web.WebAppConfigurationimport org.springframework.validation.BeanPropertyBindingResultimport org.springframework.validation.BindingResultimport spock.lang.Sharedimport spock.lang.Specificationimport javax.transaction.Transactional@ContextConfiguration(classes = AppTestConfig.class)@WebAppConfiguration@Transactional@ActiveProfiles(AppProfile.TEST_PROFILE)public class ArticleApiIntegrationSpecification extends Specification implements TestIsolator {    @Autowired    OrderApi orderApi    @Autowired    au.com.parcelpoint.api.web.controllers.v4_1.OrderApi orderApiV4_1    @Autowired    au.com.parcelpoint.api.web.controllers.v4_1.FulfilmentApi fulfilmentAPI_V4_1    @Autowired    au.com.parcelpoint.api.web.controllers.v4.FulfilmentApi fulfilmentAPIV4    @Autowired    SkuApi skuApi    @Autowired    CategoryApi categoryApi    @Autowired    ProductApi productApi    @Autowired    InventoryApi inventoryApi    @Autowired    ArticleApi articleApi    @Autowired    RetailerService retailerService    @Autowired    ArticleService articleService    @Autowired    FulfilmentService fulfilmentService    @Autowired    LocationRepository locationRepository    @Autowired    AgentRepository agentRepository    @Autowired    SkuRepository skuRepository    @Autowired    SkuLocationInventoryRepository inventoryRepository    @Autowired    AgentOpeningRepository agentOpeningRepository    @Autowired    RetailerRepository retailerRepository    @Autowired    CarrierRepository carrierRepository    @Autowired    UserRepository userRepository    @Autowired    FulfilmentItemRepository fulfilmentItemRepository    @Autowired    FulfilmentRepository fulfilmentRepository    @Autowired    AgentStorageAreaRepository agentStorageAreaRepository    @Autowired    OrderRepository orderRepository    @Autowired    DevAPIClient loggedInUser    @Shared    AgentOpeningEntity agentOpeningEntity    static Retailer retailer    static Retailer retailer2    private final static String RESOURCES_FOLDER = "v4_1/articleApi"    def init() {        loggedInUser.setRetailerId(1)        ObjectMapper mapper = new ObjectMapper()        URL retailerResource = getClass().getClassLoader().getResource("${RESOURCES_FOLDER}/retailer.json")        retailer = mapper.readValue(retailerResource, Retailer.class)        retailer = retailerService.saveRetailer(retailer)        loggedInUser.setRetailerId(retailer.retailerId)        retailerResource = getClass().getClassLoader().getResource("${RESOURCES_FOLDER}/retailer2.json")        retailer2 = mapper.readValue(retailerResource, Retailer.class)        retailer2 = retailerService.saveRetailer(retailer2)        agentOpeningEntity = new AgentOpeningEntity()        agentOpeningEntity = agentOpeningRepository.save(agentOpeningEntity)        AgentLocationEntity locationAgent1 = ObjectMotherUtil.getAgentLocationEntity()        locationAgent1.timeZone = "Australia/Sydney"        locationAgent1.locationReference = "locationRef001"        locationRepository.save(locationAgent1)        AgentEntity agent1 = ObjectMotherUtil.getAgentEntity()        agent1.primaryLocation = locationAgent1        agent1.externalId = "locationRef001"        agent1.type = AgentEntity.Types.STORE        agent1.defaultCarrier = "AUSTRALIA_POST"        agent1.openingHours = agentOpeningEntity        agentRepository.save(agent1)        AgentLocationEntity locationWarehouse = ObjectMotherUtil.getAgentLocationEntity()        locationWarehouse.timeZone = "Australia/Sydney"        locationWarehouse.locationReference = "Warehouse1"        locationRepository.save(locationWarehouse)        AgentEntity agentWarehouse = ObjectMotherUtil.getAgentEntity()        agentWarehouse.primaryLocation = locationWarehouse        agentWarehouse.externalId = "Warehouse1"        agentWarehouse.type = AgentEntity.Types.WAREHOUSE        agentWarehouse.defaultCarrier = "AUSTRALIA_POST"        agentWarehouse.openingHours = agentOpeningEntity        agentRepository.save(agentWarehouse)        AgentLocationEntity agentLocation146 = ObjectMotherUtil.getAgentLocationEntity()        agentLocation146.timeZone = "Australia/Sydney"        agentLocation146.locationReference = "146"        locationRepository.save(agentLocation146)        AgentEntity agent146 = ObjectMotherUtil.getAgentEntity()        agent146.primaryLocation = agentLocation146        agent146.externalId = "146"        agent146.type = AgentEntity.Types.STORE        agent146.defaultCarrier = "AUSTRALIA_POST"        agent146.openingHours = agentOpeningEntity        agentRepository.save(agent146)        AgentLocationEntity agentLocation045 = ObjectMotherUtil.getAgentLocationEntity()        agentLocation045.timeZone = "Australia/Sydney"        agentLocation045.locationReference = "045"        locationRepository.save(agentLocation045)        AgentEntity agent045 = ObjectMotherUtil.getAgentEntity()        agent045.primaryLocation = agentLocation045        agent045.externalId = "045"        agent045.type = AgentEntity.Types.STORE        agent045.defaultCarrier = "AUSTRALIA_POST"        agent045.openingHours = agentOpeningEntity        agentRepository.save(agent045)        AgentStorageAreaEntity agentStorageArea = ObjectMotherUtil.getAgentStorageAreaEntity()        agentStorageArea.agent = agent045        agentStorageAreaRepository.save(agentStorageArea)        agent045.agentStorageAreas = Lists.newArrayList(agentStorageArea)        // associated agent with the retailer        AgentUserEntity agentUserWarehouse = userRepository.save(new AgentUserEntity(agent: agentWarehouse, retailer: retailerService.retrieveById(retailer.retailerId)))        AgentUserEntity agentUserLocation146 = userRepository.save(new AgentUserEntity(agent: agent146, retailer: retailerService.retrieveById(retailer.retailerId)))        AgentUserEntity agentUser1 = userRepository.save(new AgentUserEntity(agent: agent1, retailer: retailerService.retrieveById(retailer.retailerId)))        ObjectBuilder persistentObjectBuilder = new ObjectBuilder()        Category category = persistentObjectBuilder.createNewCategory(categoryApi, "${RESOURCES_FOLDER}/category.json")        Product product = persistentObjectBuilder.createNewProduct(category, productApi, "${RESOURCES_FOLDER}/product.json")        Sku sku1 = persistentObjectBuilder.createNewSku(category, product, skuApi, "${RESOURCES_FOLDER}/sku.json")        Inventory inventory1 = persistentObjectBuilder.createNewInventory(agentWarehouse, inventoryApi, "${RESOURCES_FOLDER}/inventory3.json")        Sku sku2 = persistentObjectBuilder.createNewSku(category, product, skuApi, "${RESOURCES_FOLDER}/sku2.json")        Inventory inventory2 = persistentObjectBuilder.createNewInventory(agentWarehouse, inventoryApi, "${RESOURCES_FOLDER}/inventory5.json")        loggedInUser.setRetailerId(retailer2.retailerId)        carrierRepository.save(ObjectMotherUtil.getCarrierEntity())        carrierRepository.save(ObjectMotherUtil.getTemandoCarrierEntity())    }    @AfterTransaction    def reset() {        loggedInUser.setRetailerId(1)    }    def "Create article, link to agent storage area for article PUT API"() {        loggedInUser.setRetailerId(1)        init()        ObjectMapper mapper = new ObjectMapper()        URL orderResource = getClass().getClassLoader().getResource(fileName)        URL articleRequestResource = getClass().getClassLoader().getResource(articleFileName)        given:        Order orderDTO = mapper.readValue(orderResource, Order.class)        FulfilmentArticleRequest articleRequest = mapper.readValue(articleRequestResource, FulfilmentArticleRequest.class)        BindingResult orderBindingResult = new BeanPropertyBindingResult(orderDTO, "order")        orderDTO.retailer.retailerId = retailer.retailerId        when:        loggedInUser.setRetailerId(retailer.retailerId)        SuccessResponse orderResponse = orderApi.bookNewOrder(orderDTO, orderBindingResult)        CustomerOrderEntity orderEntity = orderRepository.findOne(orderResponse.id)        SuccessResponse articleResponse = fulfilmentAPI_V4_1.createArticleConsignment(orderResponse.id, orderEntity.getFulfilments().getAt(0).id, articleRequest)        SuccessResponse response = articleApi.updateArticleAgentStorageArea(articleResponse.id, "RED 01", null)        ArticleEntity article = articleService.getArticleEntityById(articleResponse.id)        AgentEntity agentEntity = agentRepository.findByExternalId("045")        then:        response != null        article != null        article.getAgentStorageAreas().size() > 0        article.getAgentStorageAreas().get(0).externalId == "RED 01"        agentEntity != null        agentEntity.getAgentStorageAreas().size() > 0        agentEntity.getAgentStorageAreas().getAt(0).articles != null        agentEntity.getAgentStorageAreas().getAt(0).articles.get(0).getExternalReference() == article.getExternalReference()        where:        fileName                          | value   | articleFileName        "${RESOURCES_FOLDER}/order1.json" | "value" | "${RESOURCES_FOLDER}/article1.json"    }}